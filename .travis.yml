language: generic

script_linux: &linux
 # first test sudoless
 - sudo bash -c 'echo "/tmp/logbt-coredumps/core.%p.%E" > /proc/sys/kernel/core_pattern'
 - echo "running test sudoless"
 - ./test/unit.sh
 # now set the kernfile to something wrong to ensure that
 # the next run as sudo will fix and work
 - echo ""
 - echo "running tests again as sudo"
 - sudo bash -c 'echo "dummy" > /proc/sys/kernel/core_pattern'
 # now run tests as sudo
 - sudo ./test/unit.sh

script_osx: &osx
  # first test sudoless
 - sudo sysctl kern.corefile=/tmp/logbt-coredumps/core.%P
 - echo "running test sudoless"
 - ./test/unit.sh
 # now set the kernfile to something wrong to ensure that
 # the next run as sudo will fix and work
 - echo ""
 - echo "running tests again as sudo"
 - sudo sysctl kern.corefile=dummy
 # now run tests as sudo
 - sudo ./test/unit.sh

matrix:
  include:
    - os: linux
      sudo: required
      dist: precise
      env: CXX=clang++
      before_script:
        - git clone -b master --single-branch https://github.com/mapbox/mason.git .mason
        - ./.mason/mason install gdb 7.12
        - sudo ln -s $(./.mason/mason prefix gdb 7.12)/bin/gdb /usr/local/bin/gdb
        - which gdb
        - ./.mason/mason install clang++ 3.8.1
        - export PATH=$(./.mason/mason prefix clang++ 3.8.1)/bin:${PATH}
        - which clang++
      script: *linux
    - os: linux
      sudo: required
      dist: trusty
      env: CXX=g++-5
      script: *linux
      addons:
        apt:
          sources: [ 'ubuntu-toolchain-r-test']
          packages: [ 'gdb','g++-5']
    - os: linux
      sudo: required
      dist: trusty
      env: CXX=g++-6
      script: *linux
      addons:
        apt:
          sources: [ 'ubuntu-toolchain-r-test']
          packages: [ g++-6']
      before_script:
        - git clone -b master --single-branch https://github.com/mapbox/mason.git .mason
        - ./.mason/mason install gdb 7.12
        - sudo ln -s $(./.mason/mason prefix gdb 7.12)/bin/gdb /usr/local/bin/gdb
        - which gdb
    - os: osx
      script: *osx

install:
  # install node in a way that ensures node will be on PATH for sudo and sudoless usage
  # install-node is a good solution given https://github.com/travis-ci/travis-ci/issues/1350
  # which causes `source nvm.sh && sudo node ...` to fail
  - curl https://s3.amazonaws.com/mapbox/apps/install-node/v2.0.0/run -o run
  - chmod +x ./run
  - export PLATFORM="linux"
  # clear out brew installed node otherwise its broken symlinks prevent our node
  # from being installed
  - if [[ $(uname -s) == 'Darwin' ]]; then export PLATFORM="darwin" && brew rm node || true; fi;
  - sudo NV=4.4.2 NP=${PLATFORM}-x64 OD=/usr/local ./run
  - bash --version
  # clear out default-installed node versions on linux to ensure out version is used
  - rm -rf ~/.nvm/
  - which node
  - node --version
